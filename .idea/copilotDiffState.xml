<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/game_logic/player.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/game_logic/player.py" />
              <option name="originalContent" value="import ctypes&#10;import os&#10;import random&#10;from math import radians&#10;&#10;from pico2d import load_image, get_time, get_canvas_height, get_canvas_width&#10;from sdl2 import (SDL_KEYDOWN, SDLK_SPACE, SDLK_RIGHT, SDL_KEYUP, SDLK_LEFT, SDL_GetMouseState,&#10;                  SDLK_a, SDLK_d, SDLK_w, SDLK_s)&#10;&#10;from .equipment import EquipmentManager, Sword, Shield&#10;from .state_machine import StateMachine&#10;from . import framework&#10;&#10;def Akey_down(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYDOWN and e[1].key == SDLK_a&#10;def Akey_up(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYUP and e[1].key == SDLK_a&#10;def Dkey_down(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYDOWN and e[1].key == SDLK_d&#10;def Dkey_up(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYUP and e[1].key == SDLK_d&#10;def Wkey_down(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYDOWN and e[1].key == SDLK_w&#10;def Wkey_up(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYUP and e[1].key == SDLK_w&#10;def Skey_down(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYDOWN and e[1].key == SDLK_s&#10;def Skey_up(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYUP and e[1].key == SDLK_s&#10;&#10;# 커스텀 이벤트 정의&#10;def move_event(e):&#10;    return e[0] == 'MOVE'&#10;&#10;def stop_event(e):&#10;    return e[0] == 'STOP'&#10;&#10;class Run:&#10;    def __init__(self, player):&#10;        self.player = player&#10;        folder = os.path.join('resources', 'Texture_organize', 'Player_character', 'Adventurer')&#10;&#10;        def load_seq(prefix, path):&#10;            files = sorted([f for f in os.listdir(path)&#10;                           if isinstance(f, str) and f.startswith(prefix) and f.lower().endswith('.png')])&#10;            return [load_image(os.path.join(path, f)) for f in files]&#10;&#10;        self.lower_frames = load_seq('Player_Adventurer_Move_Lower', folder)&#10;        self.upper_frames = load_seq('Player_Adventurer_Move_Upper', folder)&#10;&#10;        # 파티클 리소스 로드&#10;        particle_folder = os.path.join('resources', 'Texture_organize', 'VFX', 'Run_Dust')&#10;        self.particle_frames = load_seq('RunDust_Ver2_', particle_folder)&#10;        self.particle_spawn_timer = 0.0&#10;        self.particle_spawn_interval = 0.15 # 파티클 생성 간격&#10;&#10;        if not self.lower_frames or not self.upper_frames:&#10;            raise RuntimeError(f'Move frames not found in {folder}')&#10;&#10;        self.frame = 0&#10;        self.frame_time_acc = 0.0&#10;        self.frame_duration = 0.06&#10;        self.moving_speed = 300 # 초당 픽셀&#10;&#10;    def enter(self, e):&#10;        # 파티클 타이머만 초기화&#10;        self.particle_spawn_timer = 0.0&#10;&#10;    def exit(self, e):&#10;        # 파티클을 제거하지 않고 그대로 둠&#10;        pass&#10;&#10;    def do(self):&#10;        dt = framework.get_delta_time()&#10;&#10;        # 플레이어 애니메이션 및 위치 업데이트&#10;        self.frame_time_acc += dt&#10;        if self.frame_time_acc &gt;= self.frame_duration:&#10;            self.frame_time_acc -= self.frame_duration&#10;            self.frame = (self.frame + 1) % len(self.lower_frames)&#10;&#10;        dir_magnitude = (self.player.dir[0] ** 2 + self.player.dir[1] ** 2) ** 0.5&#10;        if dir_magnitude &gt; 0:&#10;            norm_dir_x = self.player.dir[0] / dir_magnitude&#10;            norm_dir_y = self.player.dir[1] / dir_magnitude&#10;            if self.player.x + norm_dir_x * self.moving_speed * dt &gt; get_canvas_width():&#10;                self.player.x = get_canvas_width()&#10;            elif self.player.x + norm_dir_x * self.moving_speed * dt &lt; 0:&#10;                self.player.x = 0&#10;            else: self.player.x += norm_dir_x * self.moving_speed * dt&#10;            if self.player.y + norm_dir_y * self.moving_speed * dt &gt; get_canvas_height():&#10;                self.player.y = get_canvas_height()&#10;            elif self.player.y + norm_dir_y * self.moving_speed * dt &lt; 0:&#10;                self.player.y = 0&#10;            else: self.player.y += norm_dir_y * self.moving_speed * dt&#10;&#10;&#10;        # 파티클 생성&#10;        self.particle_spawn_timer += dt&#10;        if self.particle_spawn_timer &gt;= self.particle_spawn_interval:&#10;            self.particle_spawn_timer -= self.particle_spawn_interval&#10;            # 플레이어 발밑에 파티클 생성 (y좌표 오프셋 조절)&#10;            particle_x = self.player.x + random.uniform(-10, 10)&#10;            particle_y = self.player.y - 40 + random.uniform(-5, 5)&#10;            new_particle = VFX_Run_Particle(particle_x, particle_y, self.particle_frames, 0.05, 2.0)&#10;            self.player.particles.append(new_particle)&#10;&#10;&#10;    def draw(self):&#10;        # 파티클은 Player에서 그림&#10;&#10;        # 마우스 위치 읽기&#10;        mx = ctypes.c_int(0)&#10;        my = ctypes.c_int(0)&#10;        SDL_GetMouseState(ctypes.byref(mx), ctypes.byref(my))&#10;&#10;        # 마우스 x좌표에 따라 face_dir 설정&#10;        if mx.value &lt; self.player.x:&#10;            self.player.face_dir = -1&#10;        else:&#10;            self.player.face_dir = 1&#10;&#10;        flip = '' if self.player.face_dir == 1 else 'h'&#10;        lower = self.lower_frames[self.frame]&#10;        upper = self.upper_frames[self.frame]&#10;&#10;        lw, lh = lower.w, lower.h&#10;        uw, uh = upper.w, upper.h&#10;&#10;        # 마우스 위치 읽어 pico2d 좌표계로 변환&#10;        canvas_h = get_canvas_height()&#10;        mouse_game_y = canvas_h - my.value&#10;&#10;        # 마우스가 플레이어보다 위에 있으면 upper를 위에 그림&#10;        if mouse_game_y &gt; self.player.y:&#10;            lower.clip_composite_draw(0, 0, lw, lh, 0, flip,self.player.x, self.player.y,&#10;                                      lw * self.player.scale_factor, lh * self.player.scale_factor)&#10;            upper.clip_composite_draw(0, 0, uw, uh, 0, flip,self.player.x, self.player.y,&#10;                                      uw * self.player.scale_factor, uh * self.player.scale_factor)&#10;        else:&#10;            upper.clip_composite_draw(0, 0, uw, uh, 0, flip,self.player.x, self.player.y,&#10;                                      uw * self.player.scale_factor, uh * self.player.scale_factor)&#10;            lower.clip_composite_draw(0, 0, lw, lh, 0, flip,self.player.x, self.player.y,&#10;                                      lw * self.player.scale_factor, lh * self.player.scale_factor)&#10;&#10;class Idle:&#10;    def __init__(self, player):&#10;        self.player = player&#10;        folder = os.path.join('resources', 'Texture_organize', 'Player_character', 'Adventurer')&#10;&#10;        def load_seq(prefix):&#10;            files = sorted([f for f in os.listdir(folder)&#10;                           if isinstance(f, str) and f.startswith(prefix) and f.lower().endswith('.png')])&#10;            return [load_image(os.path.join(folder, f)) for f in files]&#10;&#10;        self.lower_frames = load_seq('Player_Adventurer_Idle_Lower')&#10;        self.upper_frames = load_seq('Player_Adventurer_Idle_Upper')&#10;&#10;        if not self.lower_frames or not self.upper_frames:&#10;            raise RuntimeError(f'Idle frames not found in {folder}')&#10;&#10;        self.frame = 0&#10;        self.frame_time_acc = 0.0&#10;        self.frame_duration = 0.12&#10;&#10;    def enter(self, e):&#10;        self.player.dir = [0, 0]&#10;&#10;    def exit(self, e):&#10;        pass&#10;&#10;    def do(self):&#10;        dt = framework.get_delta_time()&#10;&#10;        self.frame_time_acc += dt&#10;        while self.frame_time_acc &gt;= self.frame_duration:&#10;            self.frame_time_acc -= self.frame_duration&#10;            self.frame = (self.frame + 1) % len(self.lower_frames)&#10;&#10;    def draw(self):&#10;        # 마우스 위치 읽기&#10;        mx = ctypes.c_int(0)&#10;        my = ctypes.c_int(0)&#10;        SDL_GetMouseState(ctypes.byref(mx), ctypes.byref(my))&#10;&#10;        # 마우스 x좌표에 따라 face_dir 설정&#10;        if mx.value &lt; self.player.x:&#10;            self.player.face_dir = -1&#10;        else:&#10;            self.player.face_dir = 1&#10;&#10;        flip = '' if self.player.face_dir == 1 else 'h'&#10;        lower = self.lower_frames[self.frame]&#10;        upper = self.upper_frames[self.frame]&#10;&#10;        lw, lh = lower.w, lower.h&#10;        uw, uh = upper.w, upper.h&#10;&#10;        # 마우스 위치 읽어 pico2d 좌표계로 변환&#10;        canvas_h = get_canvas_height()&#10;        mouse_game_y = canvas_h - my.value&#10;&#10;        # 마우스가 플레이어보다 위에 있으면 upper를 위에 그림&#10;        if mouse_game_y &gt; self.player.y:&#10;            lower.clip_composite_draw(0, 0, lw, lh, 0, flip,self.player.x, self.player.y,&#10;                                      lw * self.player.scale_factor, lh * self.player.scale_factor)&#10;            upper.clip_composite_draw(0, 0, uw, uh, 0, flip,self.player.x, self.player.y,&#10;                                      uw * self.player.scale_factor, uh * self.player.scale_factor)&#10;        else:&#10;            upper.clip_composite_draw(0, 0, uw, uh, 0, flip,self.player.x, self.player.y,&#10;                                      uw * self.player.scale_factor, uh * self.player.scale_factor)&#10;            lower.clip_composite_draw(0, 0, lw, lh, 0, flip,self.player.x, self.player.y,&#10;                                      lw * self.player.scale_factor, lh * self.player.scale_factor)&#10;&#10;class Player:&#10;    def __init__(self):&#10;        self.x = get_canvas_width() // 2&#10;        self.y = get_canvas_height() // 2&#10;        self.frame = 0&#10;        self.dir = [0, 0]  # x, y 방향 벡터&#10;        self.face_dir = 1&#10;        self.scale_factor = 3.0&#10;        self.keys_down = {'w': False, 'a': False, 's': False, 'd': False}&#10;        self.moving = False # 이동 상태 플래그&#10;        self.particles = [] # 파티클 리스트를 Player로 이동&#10;        self.attack_effects = [] # 공격 이펙트 리스트&#10;&#10;        # 장비 매니저 초기화&#10;        self.equipment_manager = EquipmentManager(self)&#10;&#10;        # 기본 무기 장착 (Tier1 검과 방패)&#10;        sword_path = os.path.join('resources', 'Texture_organize', 'Weapon', 'SwordANDShield', 'Tier1', 'Sword_Tier1.png')&#10;        shield_path = os.path.join('resources', 'Texture_organize', 'Weapon', 'SwordANDShield', 'Tier1', 'Shield_Tier1.png')&#10;&#10;        self.sword = Sword(self, sword_path, scale=3.0)&#10;        self.shield = Shield(self, shield_path, scale=3.0)&#10;&#10;        self.equipment_manager.equip(self.sword)&#10;        self.equipment_manager.equip(self.shield)&#10;&#10;        # 상태 정의&#10;        self.IDLE = Idle(self)&#10;        self.RUN = Run(self)&#10;        # 상태 변환에 대한 매핑&#10;        self.state_machine = StateMachine(&#10;            self.IDLE,&#10;        {&#10;                self.IDLE: {move_event: self.RUN},&#10;                self.RUN: {stop_event: self.IDLE},&#10;            }&#10;        )&#10;&#10;    def update(self):&#10;        self.state_machine.update()&#10;&#10;        # 파티클 업데이트 (상태와 무관하게 항상 실행)&#10;        for p in self.particles:&#10;            p.update()&#10;        self.particles = [p for p in self.particles if p.life &gt; 0]&#10;&#10;        # 공격 이펙트 업데이트&#10;        for effect in self.attack_effects:&#10;            effect.update()&#10;        self.attack_effects = [e for e in self.attack_effects if e.life &gt; 0]&#10;&#10;        # 장비 업데이트&#10;        self.equipment_manager.update()&#10;&#10;    def draw(self):&#10;        # 파티클 먼저 그리기 (캐릭터 뒤에 나타나도록)&#10;        for p in self.particles:&#10;            p.draw()&#10;&#10;        # 공격 이펙트 그리기 (검 뒤에)&#10;        for effect in self.attack_effects:&#10;            effect.draw()&#10;&#10;        # 뒤에 그려질 장비 (검)&#10;        self.equipment_manager.draw_back()&#10;&#10;        # 그 다음 캐릭터 그리기&#10;        self.state_machine.draw()&#10;&#10;        # 앞에 그려질 장비 (방패)&#10;        self.equipment_manager.draw_front()&#10;&#10;    def handle_event(self, event):&#10;        # 장비 이벤트 먼저 처리 (공격 등)&#10;        self.equipment_manager.handle_event(event)&#10;&#10;        # 키보드 입력 처리&#10;        if event.type == SDL_KEYDOWN:&#10;            if event.key == SDLK_w: self.keys_down['w'] = True; self.dir[1] += 1&#10;            elif event.key == SDLK_a: self.keys_down['a'] = True; self.dir[0] -= 1&#10;            elif event.key == SDLK_s: self.keys_down['s'] = True; self.dir[1] -= 1&#10;            elif event.key == SDLK_d: self.keys_down['d'] = True; self.dir[0] += 1&#10;        elif event.type == SDL_KEYUP:&#10;            if event.key == SDLK_w: self.keys_down['w'] = False; self.dir[1] -= 1&#10;            elif event.key == SDLK_a: self.keys_down['a'] = False; self.dir[0] += 1&#10;            elif event.key == SDLK_s: self.keys_down['s'] = False; self.dir[1] += 1&#10;            elif event.key == SDLK_d: self.keys_down['d'] = False; self.dir[0] -= 1&#10;&#10;        # 상태 전환 이벤트 생성&#10;        is_moving = any(self.keys_down.values())&#10;        if is_moving and not self.moving:&#10;            self.state_machine.handle_state_event(('MOVE', event))&#10;            self.moving = True&#10;        elif not is_moving and self.moving:&#10;            self.state_machine.handle_state_event(('STOP', event))&#10;            self.moving = False&#10;&#10;class VFX_Run_Particle:&#10;    def __init__(self, x, y, frames, frame_duration, scale):&#10;        self.x, self.y = x, y&#10;        self.frames = frames&#10;        self.frame = 0&#10;        self.frame_time_acc = 0.0&#10;        self.frame_duration = frame_duration&#10;        self.scale_factor = scale&#10;        self.life = len(frames) * frame_duration&#10;&#10;    def update(self):&#10;        dt = framework.get_delta_time()&#10;        self.life -= dt&#10;        if self.life &lt; 0:&#10;            return False  # 수명이 다하면 False 반환&#10;&#10;        self.frame_time_acc += dt&#10;        if self.frame_time_acc &gt;= self.frame_duration:&#10;            self.frame_time_acc -= self.frame_duration&#10;            self.frame = (self.frame + 1)&#10;        return True&#10;&#10;    def draw(self):&#10;        if self.frame &lt; len(self.frames):&#10;            image = self.frames[self.frame]&#10;            image.draw(self.x, self.y + 20, image.w * self.scale_factor, image.h * self.scale_factor)&#10;&#10;&#10;class VFX_Tier1_Sword_Swing:&#10;    &quot;&quot;&quot;검 공격 이펙트 VFX&quot;&quot;&quot;&#10;    def __init__(self, x, y, angle, flip, scale=4.5, range_factor=60):&#10;        import math&#10;&#10;        # 받은 위치에서 angle 방향으로 range_factor만큼 떨어진 위치 계산&#10;        temp_x = range_factor * math.cos(angle)&#10;        temp_y = range_factor * math.sin(angle)&#10;&#10;        self.x = x + temp_x&#10;        self.y = y + temp_y&#10;        &#10;        # 각도 조정: 마우스가 오른쪽(0도~90도, 270도~360도)일 때 -90도, 왼쪽일 때 +90도&#10;        angle_deg = math.degrees(angle) % 360&#10;        if 90 &lt; angle_deg &lt; 270:  # 왼쪽&#10;            self.angle = angle + math.radians(90)&#10;        else:  # 오른쪽&#10;            self.angle = angle - math.radians(90)&#10;        &#10;        self.flip = flip&#10;        self.scale_factor = scale&#10;&#10;        # 이펙트 이미지 로드&#10;        fx_folder = os.path.join('resources', 'Texture_organize', 'Weapon', 'SwordANDShield', 'Swing_FX')&#10;        self.frames = [&#10;            load_image(os.path.join(fx_folder, 'Sword0_Swing0.png')),&#10;            load_image(os.path.join(fx_folder, 'Sword0_Swing1.png'))&#10;        ]&#10;&#10;        self.frame = 0&#10;        self.frame_time_acc = 0.0&#10;        self.frame_duration = 0.05  # 각 프레임당 0.05초&#10;        self.life = len(self.frames) * self.frame_duration  # 총 수명&#10;&#10;    def update(self):&#10;        dt = framework.get_delta_time()&#10;        self.life -= dt&#10;        if self.life &lt;= 0:&#10;            return False  # 수명이 다하면 False 반환&#10;&#10;        self.frame_time_acc += dt&#10;        if self.frame_time_acc &gt;= self.frame_duration:&#10;            self.frame_time_acc -= self.frame_duration&#10;            self.frame += 1&#10;            if self.frame &gt;= len(self.frames):&#10;                self.frame = len(self.frames) - 1  # 마지막 프레임 유지&#10;        return True&#10;&#10;    def draw(self):&#10;        if self.frame &lt; len(self.frames):&#10;            image = self.frames[self.frame]&#10;            image.clip_composite_draw(&#10;                0, 0, image.w, image.h,&#10;                self.angle, self.flip,&#10;                self.x, self.y,&#10;                image.w * self.scale_factor,&#10;                image.h * self.scale_factor&#10;            )&#10;" />
              <option name="updatedContent" value="import ctypes&#10;import os&#10;import random&#10;from math import radians&#10;&#10;from pico2d import load_image, get_time, get_canvas_height, get_canvas_width&#10;from sdl2 import (SDL_KEYDOWN, SDLK_SPACE, SDLK_RIGHT, SDL_KEYUP, SDLK_LEFT, SDL_GetMouseState,&#10;                  SDLK_a, SDLK_d, SDLK_w, SDLK_s)&#10;&#10;from .equipment import EquipmentManager, Sword, Shield&#10;from .state_machine import StateMachine&#10;from . import framework&#10;&#10;def Akey_down(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYDOWN and e[1].key == SDLK_a&#10;def Akey_up(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYUP and e[1].key == SDLK_a&#10;def Dkey_down(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYDOWN and e[1].key == SDLK_d&#10;def Dkey_up(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYUP and e[1].key == SDLK_d&#10;def Wkey_down(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYDOWN and e[1].key == SDLK_w&#10;def Wkey_up(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYUP and e[1].key == SDLK_w&#10;def Skey_down(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYDOWN and e[1].key == SDLK_s&#10;def Skey_up(e):&#10;    return e[0] == 'INPUT' and e[1].type == SDL_KEYUP and e[1].key == SDLK_s&#10;&#10;# 커스텀 이벤트 정의&#10;def move_event(e):&#10;    return e[0] == 'MOVE'&#10;&#10;def stop_event(e):&#10;    return e[0] == 'STOP'&#10;&#10;class Run:&#10;    def __init__(self, player):&#10;        self.player = player&#10;        folder = os.path.join('resources', 'Texture_organize', 'Player_character', 'Adventurer')&#10;&#10;        def load_seq(prefix, path):&#10;            files = sorted([f for f in os.listdir(path)&#10;                           if isinstance(f, str) and f.startswith(prefix) and f.lower().endswith('.png')])&#10;            return [load_image(os.path.join(path, f)) for f in files]&#10;&#10;        self.lower_frames = load_seq('Player_Adventurer_Move_Lower', folder)&#10;        self.upper_frames = load_seq('Player_Adventurer_Move_Upper', folder)&#10;&#10;        # 파티클 리소스 로드&#10;        particle_folder = os.path.join('resources', 'Texture_organize', 'VFX', 'Run_Dust')&#10;        self.particle_frames = load_seq('RunDust_Ver2_', particle_folder)&#10;        self.particle_spawn_timer = 0.0&#10;        self.particle_spawn_interval = 0.15 # 파티클 생성 간격&#10;&#10;        if not self.lower_frames or not self.upper_frames:&#10;            raise RuntimeError(f'Move frames not found in {folder}')&#10;&#10;        self.frame = 0&#10;        self.frame_time_acc = 0.0&#10;        self.frame_duration = 0.06&#10;        self.moving_speed = 300 # 초당 픽셀&#10;&#10;    def enter(self, e):&#10;        # 파티클 타이머만 초기화&#10;        self.particle_spawn_timer = 0.0&#10;&#10;    def exit(self, e):&#10;        # 파티클을 제거하지 않고 그대로 둠&#10;        pass&#10;&#10;    def do(self):&#10;        dt = framework.get_delta_time()&#10;&#10;        # 플레이어 애니메이션 및 위치 업데이트&#10;        self.frame_time_acc += dt&#10;        if self.frame_time_acc &gt;= self.frame_duration:&#10;            self.frame_time_acc -= self.frame_duration&#10;            self.frame = (self.frame + 1) % len(self.lower_frames)&#10;&#10;        dir_magnitude = (self.player.dir[0] ** 2 + self.player.dir[1] ** 2) ** 0.5&#10;        if dir_magnitude &gt; 0:&#10;            norm_dir_x = self.player.dir[0] / dir_magnitude&#10;            norm_dir_y = self.player.dir[1] / dir_magnitude&#10;            if self.player.x + norm_dir_x * self.moving_speed * dt &gt; get_canvas_width():&#10;                self.player.x = get_canvas_width()&#10;            elif self.player.x + norm_dir_x * self.moving_speed * dt &lt; 0:&#10;                self.player.x = 0&#10;            else: self.player.x += norm_dir_x * self.moving_speed * dt&#10;            if self.player.y + norm_dir_y * self.moving_speed * dt &gt; get_canvas_height():&#10;                self.player.y = get_canvas_height()&#10;            elif self.player.y + norm_dir_y * self.moving_speed * dt &lt; 0:&#10;                self.player.y = 0&#10;            else: self.player.y += norm_dir_y * self.moving_speed * dt&#10;&#10;&#10;        # 파티클 생성&#10;        self.particle_spawn_timer += dt&#10;        if self.particle_spawn_timer &gt;= self.particle_spawn_interval:&#10;            self.particle_spawn_timer -= self.particle_spawn_interval&#10;            # 플레이어 발밑에 파티클 생성 (y좌표 오프셋 조절)&#10;            particle_x = self.player.x + random.uniform(-10, 10)&#10;            particle_y = self.player.y - 40 + random.uniform(-5, 5)&#10;            new_particle = VFX_Run_Particle(particle_x, particle_y, self.particle_frames, 0.05, 2.0)&#10;            self.player.particles.append(new_particle)&#10;&#10;&#10;    def draw(self):&#10;        # 파티클은 Player에서 그림&#10;&#10;        # 마우스 위치 읽기&#10;        mx = ctypes.c_int(0)&#10;        my = ctypes.c_int(0)&#10;        SDL_GetMouseState(ctypes.byref(mx), ctypes.byref(my))&#10;&#10;        # 마우스 x좌표에 따라 face_dir 설정&#10;        if mx.value &lt; self.player.x:&#10;            self.player.face_dir = -1&#10;        else:&#10;            self.player.face_dir = 1&#10;&#10;        flip = '' if self.player.face_dir == 1 else 'h'&#10;        lower = self.lower_frames[self.frame]&#10;        upper = self.upper_frames[self.frame]&#10;&#10;        lw, lh = lower.w, lower.h&#10;        uw, uh = upper.w, upper.h&#10;&#10;        # 마우스 위치 읽어 pico2d 좌표계로 변환&#10;        canvas_h = get_canvas_height()&#10;        mouse_game_y = canvas_h - my.value&#10;&#10;        # 마우스가 플레이어보다 위에 있으면 upper를 위에 그림&#10;        if mouse_game_y &gt; self.player.y:&#10;            lower.clip_composite_draw(0, 0, lw, lh, 0, flip,self.player.x, self.player.y,&#10;                                      lw * self.player.scale_factor, lh * self.player.scale_factor)&#10;            upper.clip_composite_draw(0, 0, uw, uh, 0, flip,self.player.x, self.player.y,&#10;                                      uw * self.player.scale_factor, uh * self.player.scale_factor)&#10;        else:&#10;            upper.clip_composite_draw(0, 0, uw, uh, 0, flip,self.player.x, self.player.y,&#10;                                      uw * self.player.scale_factor, uh * self.player.scale_factor)&#10;            lower.clip_composite_draw(0, 0, lw, lh, 0, flip,self.player.x, self.player.y,&#10;                                      lw * self.player.scale_factor, lh * self.player.scale_factor)&#10;&#10;class Idle:&#10;    def __init__(self, player):&#10;        self.player = player&#10;        folder = os.path.join('resources', 'Texture_organize', 'Player_character', 'Adventurer')&#10;&#10;        def load_seq(prefix):&#10;            files = sorted([f for f in os.listdir(folder)&#10;                           if isinstance(f, str) and f.startswith(prefix) and f.lower().endswith('.png')])&#10;            return [load_image(os.path.join(folder, f)) for f in files]&#10;&#10;        self.lower_frames = load_seq('Player_Adventurer_Idle_Lower')&#10;        self.upper_frames = load_seq('Player_Adventurer_Idle_Upper')&#10;&#10;        if not self.lower_frames or not self.upper_frames:&#10;            raise RuntimeError(f'Idle frames not found in {folder}')&#10;&#10;        self.frame = 0&#10;        self.frame_time_acc = 0.0&#10;        self.frame_duration = 0.12&#10;&#10;    def enter(self, e):&#10;        self.player.dir = [0, 0]&#10;&#10;    def exit(self, e):&#10;        pass&#10;&#10;    def do(self):&#10;        dt = framework.get_delta_time()&#10;&#10;        self.frame_time_acc += dt&#10;        while self.frame_time_acc &gt;= self.frame_duration:&#10;            self.frame_time_acc -= self.frame_duration&#10;            self.frame = (self.frame + 1) % len(self.lower_frames)&#10;&#10;    def draw(self):&#10;        # 마우스 위치 읽기&#10;        mx = ctypes.c_int(0)&#10;        my = ctypes.c_int(0)&#10;        SDL_GetMouseState(ctypes.byref(mx), ctypes.byref(my))&#10;&#10;        # 마우스 x좌표에 따라 face_dir 설정&#10;        if mx.value &lt; self.player.x:&#10;            self.player.face_dir = -1&#10;        else:&#10;            self.player.face_dir = 1&#10;&#10;        flip = '' if self.player.face_dir == 1 else 'h'&#10;        lower = self.lower_frames[self.frame]&#10;        upper = self.upper_frames[self.frame]&#10;&#10;        lw, lh = lower.w, lower.h&#10;        uw, uh = upper.w, upper.h&#10;&#10;        # 마우스 위치 읽어 pico2d 좌표계로 변환&#10;        canvas_h = get_canvas_height()&#10;        mouse_game_y = canvas_h - my.value&#10;&#10;        # 마우스가 플레이어보다 위에 있으면 upper를 위에 그림&#10;        if mouse_game_y &gt; self.player.y:&#10;            lower.clip_composite_draw(0, 0, lw, lh, 0, flip,self.player.x, self.player.y,&#10;                                      lw * self.player.scale_factor, lh * self.player.scale_factor)&#10;            upper.clip_composite_draw(0, 0, uw, uh, 0, flip,self.player.x, self.player.y,&#10;                                      uw * self.player.scale_factor, uh * self.player.scale_factor)&#10;        else:&#10;            upper.clip_composite_draw(0, 0, uw, uh, 0, flip,self.player.x, self.player.y,&#10;                                      uw * self.player.scale_factor, uh * self.player.scale_factor)&#10;            lower.clip_composite_draw(0, 0, lw, lh, 0, flip,self.player.x, self.player.y,&#10;                                      lw * self.player.scale_factor, lh * self.player.scale_factor)&#10;&#10;class Player:&#10;    def __init__(self):&#10;        self.x = get_canvas_width() // 2&#10;        self.y = get_canvas_height() // 2&#10;        self.frame = 0&#10;        self.dir = [0, 0]  # x, y 방향 벡터&#10;        self.face_dir = 1&#10;        self.scale_factor = 3.0&#10;        self.keys_down = {'w': False, 'a': False, 's': False, 'd': False}&#10;        self.moving = False # 이동 상태 플래그&#10;        self.particles = [] # 파티클 리스트를 Player로 이동&#10;        self.attack_effects = [] # 공격 이펙트 리스트&#10;&#10;        # 장비 매니저 초기화&#10;        self.equipment_manager = EquipmentManager(self)&#10;&#10;        # 기본 무기 장착 (Tier1 검과 방패)&#10;        sword_path = os.path.join('resources', 'Texture_organize', 'Weapon', 'SwordANDShield', 'Tier1', 'Sword_Tier1.png')&#10;        shield_path = os.path.join('resources', 'Texture_organize', 'Weapon', 'SwordANDShield', 'Tier1', 'Shield_Tier1.png')&#10;&#10;        self.sword = Sword(self, sword_path, scale=3.0)&#10;        self.shield = Shield(self, shield_path, scale=3.0)&#10;&#10;        self.equipment_manager.equip(self.sword)&#10;        self.equipment_manager.equip(self.shield)&#10;&#10;        # 상태 정의&#10;        self.IDLE = Idle(self)&#10;        self.RUN = Run(self)&#10;        # 상태 변환에 대한 매핑&#10;        self.state_machine = StateMachine(&#10;            self.IDLE,&#10;        {&#10;                self.IDLE: {move_event: self.RUN},&#10;                self.RUN: {stop_event: self.IDLE},&#10;            }&#10;        )&#10;&#10;    def update(self):&#10;        self.state_machine.update()&#10;&#10;        # 파티클 업데이트 (상태와 무관하게 항상 실행)&#10;        for p in self.particles:&#10;            p.update()&#10;        self.particles = [p for p in self.particles if p.life &gt; 0]&#10;&#10;        # 공격 이펙트 업데이트&#10;        for effect in self.attack_effects:&#10;            effect.update()&#10;        self.attack_effects = [e for e in self.attack_effects if e.life &gt; 0]&#10;&#10;        # 장비 업데이트&#10;        self.equipment_manager.update()&#10;&#10;    def draw(self):&#10;        # 파티클 먼저 그리기 (캐릭터 뒤에 나타나도록)&#10;        for p in self.particles:&#10;            p.draw()&#10;&#10;        # 공격 이펙트 그리기 (검 뒤에)&#10;        for effect in self.attack_effects:&#10;            effect.draw()&#10;&#10;        # 뒤에 그려질 장비 (검)&#10;        self.equipment_manager.draw_back()&#10;&#10;        # 그 다음 캐릭터 그리기&#10;        self.state_machine.draw()&#10;&#10;        # 앞에 그려질 장비 (방패)&#10;        self.equipment_manager.draw_front()&#10;&#10;    def handle_event(self, event):&#10;        # 장비 이벤트 먼저 처리 (공격 등)&#10;        self.equipment_manager.handle_event(event)&#10;&#10;        # 키보드 입력 처리&#10;        if event.type == SDL_KEYDOWN:&#10;            if event.key == SDLK_w: self.keys_down['w'] = True; self.dir[1] += 1&#10;            elif event.key == SDLK_a: self.keys_down['a'] = True; self.dir[0] -= 1&#10;            elif event.key == SDLK_s: self.keys_down['s'] = True; self.dir[1] -= 1&#10;            elif event.key == SDLK_d: self.keys_down['d'] = True; self.dir[0] += 1&#10;        elif event.type == SDL_KEYUP:&#10;            if event.key == SDLK_w: self.keys_down['w'] = False; self.dir[1] -= 1&#10;            elif event.key == SDLK_a: self.keys_down['a'] = False; self.dir[0] += 1&#10;            elif event.key == SDLK_s: self.keys_down['s'] = False; self.dir[1] += 1&#10;            elif event.key == SDLK_d: self.keys_down['d'] = False; self.dir[0] -= 1&#10;&#10;        # 상태 전환 이벤트 생성&#10;        is_moving = any(self.keys_down.values())&#10;        if is_moving and not self.moving:&#10;            self.state_machine.handle_state_event(('MOVE', event))&#10;            self.moving = True&#10;        elif not is_moving and self.moving:&#10;            self.state_machine.handle_state_event(('STOP', event))&#10;            self.moving = False&#10;&#10;class VFX_Run_Particle:&#10;    def __init__(self, x, y, frames, frame_duration, scale):&#10;        self.x, self.y = x, y&#10;        self.frames = frames&#10;        self.frame = 0&#10;        self.frame_time_acc = 0.0&#10;        self.frame_duration = frame_duration&#10;        self.scale_factor = scale&#10;        self.life = len(frames) * frame_duration&#10;&#10;    def update(self):&#10;        dt = framework.get_delta_time()&#10;        self.life -= dt&#10;        if self.life &lt; 0:&#10;            return False  # 수명이 다하면 False 반환&#10;&#10;        self.frame_time_acc += dt&#10;        if self.frame_time_acc &gt;= self.frame_duration:&#10;            self.frame_time_acc -= self.frame_duration&#10;            self.frame = (self.frame + 1)&#10;        return True&#10;&#10;    def draw(self):&#10;        if self.frame &lt; len(self.frames):&#10;            image = self.frames[self.frame]&#10;            image.draw(self.x, self.y + 20, image.w * self.scale_factor, image.h * self.scale_factor)&#10;&#10;&#10;class VFX_Tier1_Sword_Swing:&#10;    &quot;&quot;&quot;검 공격 이펙트 VFX&quot;&quot;&quot;&#10;    def __init__(self, x, y, angle, flip, scale=4.5, range_factor=60):&#10;        import math&#10;&#10;        # 받은 위치에서 angle 방향으로 range_factor만큼 떨어진 위치 계산&#10;        temp_x = range_factor * math.cos(angle)&#10;        temp_y = range_factor * math.sin(angle)&#10;&#10;        self.x = x + temp_x&#10;        self.y = y + temp_y&#10;        &#10;        # 각도 조정: 마우스가 오른쪽(0도~90도, 270도~360도)일 때 -90도, 왼쪽일 때 +90도&#10;        angle_deg = math.degrees(angle) % 360&#10;        if 90 &lt; angle_deg &lt; 270:  # 왼쪽&#10;            self.angle = angle + math.radians(90)&#10;        else:  # 오른쪽&#10;            self.angle = angle - math.radians(90)&#10;        &#10;        self.flip = flip&#10;        self.scale_factor = scale&#10;&#10;        # 이펙트 이미지 로드&#10;        fx_folder = os.path.join('resources', 'Texture_organize', 'Weapon', 'SwordANDShield', 'Swing_FX')&#10;        self.frames = [&#10;            load_image(os.path.join(fx_folder, 'Sword0_Swing0.png')),&#10;            load_image(os.path.join(fx_folder, 'Sword0_Swing1.png'))&#10;        ]&#10;&#10;        self.frame = 0&#10;        self.frame_time_acc = 0.0&#10;        self.frame_duration = 0.05  # 각 프레임당 0.05초&#10;        self.life = len(self.frames) * self.frame_duration  # 총 수명&#10;&#10;    def update(self):&#10;        dt = framework.get_delta_time()&#10;        self.life -= dt&#10;        if self.life &lt;= 0:&#10;            return False  # 수명이 다하면 False 반환&#10;&#10;        self.frame_time_acc += dt&#10;        if self.frame_time_acc &gt;= self.frame_duration:&#10;            self.frame_time_acc -= self.frame_duration&#10;            self.frame += 1&#10;            if self.frame &gt;= len(self.frames):&#10;                self.frame = len(self.frames) - 1  # 마지막 프레임 유지&#10;        return True&#10;&#10;    def draw(self):&#10;        if self.frame &lt; len(self.frames):&#10;            image = self.frames[self.frame]&#10;            image.clip_composite_draw(&#10;                0, 0, image.w, image.h,&#10;                self.angle, self.flip,&#10;                self.x, self.y,&#10;                image.w * self.scale_factor,&#10;                image.h * self.scale_factor&#10;            )" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>